import pandas as pd
import os

# Use the current working directory
directory_path = os.getcwd()

# List to hold all the data from all files
all_data = []

# Helper function to process each block of text
def process_block(block):
    # Dictionary to hold the data of one transaction
    data_entry = {
        'EMPLOYEE': '',
        'PRIMARY NAME': '',
        'DATE': '',
        'TIME': '',
        'SE': '',
        'COMMAND': '',
        'EXCEPTION': ''
    }
    # Iterate through each line in the block
    for line in block:
        parts = line.strip().split()
        if 'EMPLOYEE' not in line and parts:
            if not data_entry['EMPLOYEE']:  # Set employee name if not set
                data_entry['EMPLOYEE'] = ' '.join(parts[:2])
            if len(parts) > 2 and parts[2].isupper():  # Check if it has a primary name
                data_entry['PRIMARY NAME'] = ' '.join(parts[2:-3])
                data_entry['DATE'] = parts[-3]
                data_entry['TIME'] = parts[-2]
                data_entry['SE'] = parts[-1]
            else:
                if 'STN:' in line:
                    data_entry['COMMAND'] += (' ' + ' '.join(parts)).strip()
                elif 'SOURCE:' in line:
                    data_entry['EXCEPTION'] += (' ' + ' '.join(parts)).strip()
                else:
                    data_entry['COMMAND'] += (' ' + ' '.join(parts)).strip()
    if data_entry['PRIMARY NAME']:  # Only append if PRIMARY NAME exists
        all_data.append(data_entry)

# Read and process all .txt files in the specified directory
for filename in os.listdir(directory_path):
    if filename.endswith('.txt'):
        file_path = os.path.join(directory_path, filename)
        with open(file_path, 'r') as file:
            current_block = []
            for line in file:
                if 'EMPLOYEE' in line and current_block:
                    process_block(current_block)
                    current_block = []
                current_block.append(line)
            if current_block:  # Process the last block
                process_block(current_block)

# Create a DataFrame
df = pd.DataFrame(all_data)

# Print the DataFrame to see the result
print(df.head())

# Save the DataFrame to an Excel file if needed
output_path = os.path.join(directory_path, 'output.xlsx')
df.to_excel(output_path, index=False)


###try 
import pandas as pd
import os

# Use the current working directory
directory_path = os.getcwd()

# List to hold all the data from all files
all_data = []

# Helper function to process each block of text
def process_block(block):
    # Initialize dictionary to hold transaction data
    transaction_data = {}
    for line in block:
        parts = line.strip().split()
        if parts:
            if 'EMPLOYEE' in line:  # Start capturing transaction
                transaction_data = {
                    'EMPLOYEE': ' '.join(parts[1:-8]),
                    'PRIMARY NAME': parts[-8],
                    'DATE': parts[-7],
                    'TIME': parts[-6],
                    'SE': parts[-5],
                    'COMMAND': ' '.join(parts[-4:-2]),
                    'EXCEPTION': ' '.join(parts[-2:])
                }
            else:  # Continue to capture command and exception if they spill over multiple lines
                if 'STN:' in line:
                    transaction_data['COMMAND'] += ' ' + ' '.join(parts)
                elif 'SOURCE:' in line:
                    transaction_data['EXCEPTION'] += ' ' + ' '.join(parts)

    # Append the completed transaction data to the list
    if transaction_data:
        all_data.append(transaction_data)

# Read and process all .txt files in the specified directory
for filename in os.listdir(directory_path):
    if filename.endswith('.txt'):
        file_path = os.path.join(directory_path, filename)
        with open(file_path, 'r') as file:
            current_block = []
            for line in file:
                if 'EMPLOYEE' in line and current_block:  # New transaction starts
                    process_block(current_block)
                    current_block = []  # Clear current block for the next transaction
                current_block.append(line)
            if current_block:  # Don't forget to process the last block
                process_block(current_block)

# Create a DataFrame from the collected data
df = pd.DataFrame(all_data)

# Display the first few rows of the DataFrame to verify
print(df.head())

# Optionally save the DataFrame to an Excel file
output_excel_path = os.path.join(directory_path, 'parsed_transactions.xlsx')
df.to_excel(output_excel_path, index=False)


## multiple records
import pandas as pd
import os

# Use the current working directory
directory_path = os.getcwd()

# List to hold all the data from all files
all_data = []

# Helper function to process each block of text
def process_block(block):
    # Temporary data storage for employee and primary name
    employee_name = ''
    primary_name = ''
    for line in block:
        parts = line.strip().split()
        if 'EMPLOYEE' not in line and parts:
            if not employee_name:  # Capture the employee's name
                employee_name = ' '.join(parts[:2])
            if len(parts) > 2 and parts[2].isupper():  # Presence of primary name
                primary_name = ' '.join(parts[2:-3])
                date = parts[-3]
                time = parts[-2]
                se = parts[-1]
                command = ''
                exception = ''
            else:
                if 'STN:' in line or 'SOURCE:' not in line:
                    command = ' '.join(parts)
                if 'SOURCE:' in line:
                    exception = ' '.join(parts)
                if primary_name:  # Ensure primary name exists before appending
                    all_data.append({
                        'EMPLOYEE': employee_name,
                        'PRIMARY NAME': primary_name,
                        'DATE': date,
                        'TIME': time,
                        'SE': se,
                        'COMMAND': command,
                        'EXCEPTION': exception
                    })

# Read and process all .txt files in the specified directory
for filename in os.listdir(directory_path):
    if filename.endswith('.txt'):
        file_path = os.path.join(directory_path, filename)
        with open(file_path, 'r') as file:
            current_block = []
            for line in file:
                if 'EMPLOYEE' in line and current_block:
                    process_block(current_block)
                    current_block = []  # Reset block after processing
                current_block.append(line)
            if current_block:  # Process the last block
                process_block(current_block)

# Create a DataFrame
df = pd.DataFrame(all_data)

# Print the DataFrame to see the result
print(df.head())

# Save the DataFrame to an Excel file if needed
output_path = os.path.join(directory_path, 'output.xlsx')
df.to_excel(output_path, index=False)

### file parser
import pandas as pd
import os
import re  # Importing the regular expression library for pattern matching

# Function to check if a line looks like a valid transaction record
def is_valid_transaction(line):
    # Simple pattern check (customize as needed based on actual data characteristics)
    return bool(re.match(r"^\w+\s+[A-Za-z\s]+[\d]{2}/[\d]{2}/[\d]{4}\s+[\d]{2}:[\d]{2}[AP]M\s+\w+", line))

# Function to parse a single file
def parse_file(file_path):
    data = []
    with open(file_path, 'r') as file:
        lines = file.readlines()
        i = 0
        while i < len(lines):
            if i+1 < len(lines) and is_valid_transaction(lines[i].strip()):  # Check if the first line is a valid transaction
                first_line = lines[i].strip()
                second_line = lines[i+1].strip()

                # Parsing the first line for employee details
                parts = first_line.split()
                employee = parts[0]
                primary_name = ' '.join(parts[1:-3])  # Assumes remaining are primary name till last three parts
                date, time, se = parts[-3], parts[-2], parts[-1]

                # Parsing the second line for command and exception
                command = second_line.split('SOURCE:')[0].strip()
                exception = second_line.split('SOURCE:')[1].strip() if 'SOURCE:' in second_line else ''

                # Append the extracted data to the list
                data.append({
                    'EMPLOYEE': employee,
                    'PRIMARY NAME': primary_name,
                    'DATE': date,
                    'TIME': time,
                    'SE': se,
                    'COMMAND': command,
                    'EXCEPTION': exception
                })
                i += 2  # Move to the next set of lines
            else:
                i += 1  # Move to the next line if current line is not valid

    return data

# Directory containing the text files
directory_path = '.'

# List all .txt files in the directory
files = [f for f in os.listdir(directory_path) if f.endswith('.txt')]

# Initialize an empty DataFrame
df = pd.DataFrame()

# Process each file
for file in files:
    file_path = os.path.join(directory_path, file)
    file_data = parse_file(file_path)
    df = pd.concat([df, pd.DataFrame(file_data)], ignore_index=True)

# Specify the path for the output Excel file
output_excel_path = 'TransactionData.xlsx'

# Write the DataFrame to an Excel file
df.to_excel(output_excel_path, index=False)

print(f"Data from all files has been written to Excel successfully at {output_excel_path}.")

